// Code generated by "enumer -type=xiaomiDeviceType -transform=snake"; DO NOT EDIT.

//
package main

import (
	"fmt"
)

const _xiaomiDeviceTypeName = "gatewaybuttonmagnettemperaturemotion"

var _xiaomiDeviceTypeIndex = [...]uint8{0, 7, 13, 19, 30, 36}

func (i xiaomiDeviceType) String() string {
	if i < 0 || i >= xiaomiDeviceType(len(_xiaomiDeviceTypeIndex)-1) {
		return fmt.Sprintf("xiaomiDeviceType(%d)", i)
	}
	return _xiaomiDeviceTypeName[_xiaomiDeviceTypeIndex[i]:_xiaomiDeviceTypeIndex[i+1]]
}

var _xiaomiDeviceTypeValues = []xiaomiDeviceType{0, 1, 2, 3, 4}

var _xiaomiDeviceTypeNameToValueMap = map[string]xiaomiDeviceType{
	_xiaomiDeviceTypeName[0:7]:   0,
	_xiaomiDeviceTypeName[7:13]:  1,
	_xiaomiDeviceTypeName[13:19]: 2,
	_xiaomiDeviceTypeName[19:30]: 3,
	_xiaomiDeviceTypeName[30:36]: 4,
}

// xiaomiDeviceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func xiaomiDeviceTypeString(s string) (xiaomiDeviceType, error) {
	if val, ok := _xiaomiDeviceTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to xiaomiDeviceType values", s)
}

// xiaomiDeviceTypeValues returns all values of the enum
func xiaomiDeviceTypeValues() []xiaomiDeviceType {
	return _xiaomiDeviceTypeValues
}

// IsAxiaomiDeviceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i xiaomiDeviceType) IsAxiaomiDeviceType() bool {
	for _, v := range _xiaomiDeviceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
