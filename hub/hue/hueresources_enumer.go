// Code generated by "enumer -type=HueResources -transform=kebab -trimprefix=Resource"; DO NOT EDIT.

//
package main

import (
	"fmt"
)

const _HueResourcesName = "alllightsgroups"

var _HueResourcesIndex = [...]uint8{0, 3, 9, 15}

func (i HueResources) String() string {
	if i < 0 || i >= HueResources(len(_HueResourcesIndex)-1) {
		return fmt.Sprintf("HueResources(%d)", i)
	}
	return _HueResourcesName[_HueResourcesIndex[i]:_HueResourcesIndex[i+1]]
}

var _HueResourcesValues = []HueResources{0, 1, 2}

var _HueResourcesNameToValueMap = map[string]HueResources{
	_HueResourcesName[0:3]:  0,
	_HueResourcesName[3:9]:  1,
	_HueResourcesName[9:15]: 2,
}

// HueResourcesString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HueResourcesString(s string) (HueResources, error) {
	if val, ok := _HueResourcesNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HueResources values", s)
}

// HueResourcesValues returns all values of the enum
func HueResourcesValues() []HueResources {
	return _HueResourcesValues
}

// IsAHueResources returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HueResources) IsAHueResources() bool {
	for _, v := range _HueResourcesValues {
		if i == v {
			return true
		}
	}
	return false
}
