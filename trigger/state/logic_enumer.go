// Code generated by "enumer -type=logic -transform=kebab -trimprefix=logic -json -text -yaml"; DO NOT EDIT.

//
package main

import (
	"encoding/json"
	"fmt"
)

const _logicName = "orand"

var _logicIndex = [...]uint8{0, 2, 5}

func (i logic) String() string {
	if i < 0 || i >= logic(len(_logicIndex)-1) {
		return fmt.Sprintf("logic(%d)", i)
	}
	return _logicName[_logicIndex[i]:_logicIndex[i+1]]
}

var _logicValues = []logic{0, 1}

var _logicNameToValueMap = map[string]logic{
	_logicName[0:2]: 0,
	_logicName[2:5]: 1,
}

// logicString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func logicString(s string) (logic, error) {
	if val, ok := _logicNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to logic values", s)
}

// logicValues returns all values of the enum
func logicValues() []logic {
	return _logicValues
}

// IsAlogic returns "true" if the value is listed in the enum definition. "false" otherwise
func (i logic) IsAlogic() bool {
	for _, v := range _logicValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for logic
func (i logic) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for logic
func (i *logic) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("logic should be a string, got %s", data)
	}

	var err error
	*i, err = logicString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for logic
func (i logic) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for logic
func (i *logic) UnmarshalText(text []byte) error {
	var err error
	*i, err = logicString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for logic
func (i logic) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for logic
func (i *logic) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = logicString(s)
	return err
}
