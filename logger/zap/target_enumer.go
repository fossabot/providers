// Code generated by "enumer -type=target -json -text -yaml"; DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
)

const _targetName = "consoleinfluxDB"

var _targetIndex = [...]uint8{0, 7, 15}

func (i target) String() string {
	if i < 0 || i >= target(len(_targetIndex)-1) {
		return fmt.Sprintf("target(%d)", i)
	}
	return _targetName[_targetIndex[i]:_targetIndex[i+1]]
}

var _targetValues = []target{0, 1}

var _targetNameToValueMap = map[string]target{
	_targetName[0:7]:  0,
	_targetName[7:15]: 1,
}

// targetString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func targetString(s string) (target, error) {
	if val, ok := _targetNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to target values", s)
}

// targetValues returns all values of the enum
func targetValues() []target {
	return _targetValues
}

// IsAtarget returns "true" if the value is listed in the enum definition. "false" otherwise
func (i target) IsAtarget() bool {
	for _, v := range _targetValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for target
func (i target) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for target
func (i *target) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("target should be a string, got %s", data)
	}

	var err error
	*i, err = targetString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for target
func (i target) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for target
func (i *target) UnmarshalText(text []byte) error {
	var err error
	*i, err = targetString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for target
func (i target) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for target
func (i *target) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = targetString(s)
	return err
}
